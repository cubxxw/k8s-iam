# Copyright Â© 2022 Alibaba Group Holding Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ==============================================================================
# Makefile helper functions for generate necessary files and docs
# https://cloud.redhat.com/blog/kubernetes-deep-dive-code-generation-customresources
# ! The stock of code generated by `make gen` should be idempotent
#

## install-deepcopy-gen: check license if not exist install deepcopy-gen tools
# install-deepcopy-gen:
# ifeq (, $(shell which deepcopy-gen))
# 	{ \
# 	set -e ;\
# 	LICENSE_TMP_DIR=$$(mktemp -d) ;\
# 	cd $$LICENSE_TMP_DIR ;\
# 	go mod init tmp ;\
# 	go get -v k8s.io/code-generator/cmd/deepcopy-gen ;\
# 	rm -rf $$LICENSE_TMP_DIR ;\
# 	}
# DEEPCOPY_BIN=$(GOBIN)/deepcopy-gen
# else
# DEEPCOPY_BIN=$(shell which deepcopy-gen)
# endif

# BOILERPLATE := scripts/boilerplate.go.txt
# INPUT_DIR := github.com/sealerio/sealer/types/api

## deepcopy: generate deepcopy code
# deepcopy: install-deepcopy-gen
# 	$(DEEPCOPY_BIN) \
#       --input-dirs="$(INPUT_DIR)/v1" \
#       -O zz_generated.deepcopy   \
#       --go-header-file "$(BOILERPLATE)" \
#       --output-base "${GOPATH}/src"
# 	$(DEEPCOPY_BIN) \
# 	  --input-dirs="$(INPUT_DIR)/v2" \
# 	  -O zz_generated.deepcopy   \
# 	  --go-header-file "$(BOILERPLATE)" \
# 	  --output-base "${GOPATH}/src"

# When 'make gen.run' is executed, the previously generated files are actually cleaned up and then automatically generated separately
## gen.run: gen.deepcopy gen.docgo
.PHONY: gen.run
gen.run: gen.clean gen.deepcopyV1 gen.deepcopyV2 #gen.docs

BOILERPLATE := $(ROOT_DIR)/scripts/boilerplate.go.txt

INPUT_DIR := $(ROOT_DIR)/types/api/v1
INPUT_DIRV2 := $(ROOT_DIR)/types/api/v2
INPUT_DIRS := $(ROOT_PACKAGE)/types/api/v1
INPUT_DIRSV2 := $(ROOT_PACKAGE)/types/api/v2

# TODO: output-base: $(ROOT_PACKAGE)/types/api/v2/...... 
## gen.deepcopy: generate deepcopy v1 code
.PHONY: gen.deepcopyV1
gen.deepcopyV1: tools.verify.deepcopy-gen
	@echo "===========> Generating deepcopy go source files in $(INPUT_DIRS)"
	@$(TOOLS_DIR)/deepcopy-gen \
		--input-dirs="$(INPUT_DIRS)" \
		--output-file-base zz_generated.deepcopy \
		--go-header-file "$(BOILERPLATE)" \
		--output-base "$(INPUT_DIR)"

## gen.deepcopyV2: generate deepcopy v2 code
.PHONY: gen.deepcopyV2
gen.deepcopyV2: tools.verify.deepcopy-gen
	@echo "===========> Generating deepcopy go source files in $(INPUT_DIRSV2)"
	@$(TOOLS_DIR)/deepcopy-gen \
		--input-dirs="$(INPUT_DIRSV2)" \
		--output-file-base zz_generated.deepcopy \
		--go-header-file "$(BOILERPLATE)" \
		--output-base "$()"

## gen.docgo: generate doc.go
.PHONY: gen.docs
gen.docs: go.build
	@echo "===========> Generating deep of documents use $(BIN_DIR)/$(PLATFORM)/sealer gen-doc"
	@$(BIN_DIR)/$(PLATFORM)/sealer gen-doc

## gen.clean: clean the previously generated files
.PHONY: gen.clean
gen.clean:
	@echo "===========> Delete $(INPUT_DIR)..."
#	@find $(INPUT_DIR) -type f -name '*_generated.*.go' -delete
	@echo "===========> Delete $(INPUT_DIRS)"
#	@find $(INPUT_DIRV2) -type f -name '*_generated.*.go' -delete

## gen.help: show help for gen
.PHONY: gen.help
gen.help: scripts/make-rules/gen.mk
	$(call smallhelp)